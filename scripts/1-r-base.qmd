---
title: "Tópico 1: Introdução ao R"
author: "Beatriz Milz"
date: '2025'
lang: pt
toc: true
---

-   Diferença entre console e script.

-   Para executar o código:

    -   Clique na linha e aperte Ctrl + Enter
    -   Selecione um trecho de código e aperte Ctrl + Enter
    
- Podemos escrever comentários (textos que não serão executados) usando o hashtag (`#`).

### R como calculadora

-   O R permite realizar muitas operações matemáticas!

-   A ordem matemática das operações também vale no R.

```{r}
2 + 5    # adição

9 - 4    # subtração

5 * 2    # multiplicação

7 / 5    # divisão

8 ^ 2    # potenciação
```


###  Exercício

1. Vamos usar o R para descorir a temperatura de hoje em Fahrenheit. Converta a temperatura de Celsius para Fahrenheit, usando a segunte fórmula: `TempF =  TempC * 1.8 + 32`: 


```{r}

```


## Objetos

-   Ao se desenvolver um script é comum que algumas informações ficam repetidas ao longo do script.

-   Para reutilizar essas informações ao longo do script utilizamos o que chamamos de **objeto**.

-   Um objeto retém e representa um valor, função ou base de dados

-   Atribuindo valor a um objeto no R: utilizamos o operador: `<-`.
    Ex: `nome_do_objeto <- valor`

-   Atalho: `ALT` + `-`: cria o `<-` sinal de atribuição.

Exemplos:

```{r}
# objeto do tipo texto: SEMPRE ENTRE ASPAS!
meu_nome <- "Beatriz Milz"
meu_nome


# Objeto do tipo numérico
minha_idade <- 32
minha_idade

# objeto do tipo numérico (podemos usar casas decimais) 
minha_altura <- 1.75
minha_altura

# objeto do tipo lógico (verdadeiro/falso)
estuda <- TRUE
estuda
```

###  Exercício 

1. Crie objetos para armazenar informações sobre você: `nome` (texto), `idade` (numérico), `estuda` (verdadeiro ou falso).  


```{r}

```


## Nomes de objetos

-   Os nomes devem começar com uma letra. Podem conter letras, números, underline (`_`) e ponto (`.`).

-   **Não usar acentuação e espaços nos nomes de objetos, arquivos, pastas, etc** (muito importante!)

-   Recomendação: **usar_snake_case**, ou seja, palavras escritas em minúsculo separadas pelo underscore (`_`).

-   O `R` é *case sensitive*, isto é, faz a diferenciação entre as letras minúsculas e maiúsculas. Portanto, um objeto chamado `teste` é diferente de uma outro objeto chamada `Teste`.

###  Exercício 

1. Tente adivinhar o tipo dos objetos abaixo. 


```{r}
cor_favorita <- "roxo"
idade <- 32
altura <- "1.75"
gosta_brocolis <- TRUE
gosta_carne_porco <- "FALSE"
```

## Funções

- Funções permitem automatizar tarefas comuns de forma mais poderosa do que copiar e colar.

- O R possui muitas funções já implementadas.

- Pacotes são coleções de funções, dados e documentação que ampliam as capacidades do R básico. Veremos como instalá-los logo!

- Você pode desenvolver suas próprias funções!

- Estrutura: `nome_da_funcao(argumentos = ...)`

Exemplos:
```{r}
# Função que indica a data do sistema
Sys.Date() # não precisa de argumento para funcionar

# Salvando a data em um objeto
data_hoje <- Sys.Date()


# Função que retorna a classe do objeto
class(data_hoje) # classe/tipo: data
```


###  Exercício

1. Use a função `class()` e descubra qual é o tipo dos objetos apresentados no exercício anterior, e confira se a classe que você imaginou está correta.

```{r}



```
 
 

## Combinar elementos e criando vetores

- Podemos criar um conjunto de elementos usando a função `c()`. Exemplo:

```{r}
conjunto <- c(1, 2, 3)
conjunto
```

- Podemos criar um conjunto de sequência usando o operador `:`. Exemplo:

```{r}
conjunto_2 <- 1:10
conjunto_2 
```


- Os vetores armazena elementos de mesma classe. Caso tente combinar elementos de classe diferente, acontecerá a coerção. Ex:

```{r}
c("1", 2, 3) 

c(1, 2, TRUE) 
```

- Podemos fazer operações com os vetores:


```{r}
# Combinar elementos - Função c() 
ano_nascimento_irmaos <- c(1993, 1998, 2001, 2012, 2012)

# subtração com cada elemento do vetor:
idade_irmaos <- 2025 - ano_nascimento_irmaos

# ver o resultado
idade_irmaos
```
- Exemplo de vetor com texto:

```{r}
primeiro_semestre <- c("Janeiro", "Fevereiro", "Março",
                       "Abril", "Maio", "Junho")
```

- A função `length()` retorna o comprimento do vetor, para descobrir quantos elementos ele tem:

```{r}
length(primeiro_semestre)
```

- Selecionando elementos por índice: utilizar `[]`

```{r}
# primeiro elemento do vetor
primeiro_semestre[1] 

# primeiro elemento até o segundo
primeiro_semestre[1:2] 

# remove o elemento 1
primeiro_semestre[-1] 

# seleciona o elemento seis até o quatro 
# (e muda a ordem dos elementos)
primeiro_semestre[6:4]
```


## NA - Not Available

- Uma característica importante do R que pode dificultar a comparação são os valores ausentes ou `NA` (não disponíveis). 

- `NA` representa um valor desconhecido. 

-  Operações envolvendo um valor desconhecido também será desconhecido. Exemplo:

```{r}
vetor_com_na <- c(NA, 1, 5, 2, 5, NA)

sum(vetor_com_na) # somar os valores do vetor
```

- `is.na()` é a função que testa se um objeto é NA.

```{r}
is.na(vetor_com_na)
```

Várias funções possuem o argumento `na.rm = TRUE`, que indica que os valores `NA` devem ser removidos antes de realizar o cálculo.

```{r}
# argumento na.rm = TRUE
sum(vetor_com_na, na.rm = TRUE)
mean(vetor_com_na, na.rm = TRUE)
median(vetor_com_na, na.rm = TRUE)
sd(vetor_com_na, na.rm = TRUE)
var(vetor_com_na, na.rm = TRUE)
min(vetor_com_na, na.rm = TRUE)
max(vetor_com_na, na.rm = TRUE)
```


### Exercício

1. Execute o código abaixo para criar o objeto `vetor_massa` com os dados de massa de personagens de Star Wars que apareceram no filme "A ameaça fantasma".

```{r}
vetor_massa <- c(15, 17, 32, 40, 45, 45, 50, 55, 65, 66, 75, 75, 77, 80, 80, 
82, 82, 84, 84, 87, 89, 90, 1358, NA, NA, NA, NA, NA, NA, NA, 
NA, NA, NA, NA)
```

2. Usando as funções aprendidas hoje, verifique se a classe deste vetor é `numeric`:

```{r}

```


4. Usando funções do R, verifique quantos valores temos nesse vetor.

```{r}

```

5. Calcule a média da massa dos personagens. A função `mean()` calcula a média.

```{r}

```

6. Quais são as massas máximas e mínimas dos personagens? Use as funções `min()` e `max()` para encontrar esse valores.

```{r}

```

7. Qual é a mediana desse conjunto de valores? Use a função `median()` para calcular.

```{r}

```

8. Calcule a variância e o desvio padrão deste conjunto de valores usando as funções `var()` e `sd()`.

```{r}

```



## Buscando ajuda

- Documentação: `help(nome_da_funcao)` ou `?nome_da_funcao`.

```{r}
#| eval: false # não executar o código
help(sum)
?sum
```


-   E se ainda tiver dúvidas, pergunte para a comunidade (há grupos no Telegram e outras redes sociais).


## Instalar pacotes

- Pacotes são coleções de funções, dados e documentação que estendem as capacidades do `R` básico.

- Eles precisam ser instalados e carregados.


- Você só precisa instalar o pacote uma vez, mas precisa carregá-lo sempre que começar uma nova sessão.


- Instalação de Pacotes: `install.packages("nome-do-pacote")`. Para instalar o pacote use as aspas.

```{r}
#| eval: false # não executar o código
install.packages("tidyverse")
```


-  Carregar pacotes: `library(nome-do-pacote)`. Para carregar o pacote, não é necessário utilizar aspas.

```{r}
#| message: false # não adicionar as mensagens no arquivo final
library(tidyverse)
```




